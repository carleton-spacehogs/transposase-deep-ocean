available_reads <- read_excel("C:/Users/Admin Juntao/Desktop/bens_bins_data/all_available_RNA_reads.xlsx")
biofilm_present_bins <- read_excel("C:/Users/Admin Juntao/Desktop/bens_bins_data/biofilm_present.xlsx")
transposase_present_bins <- read_excel("C:/Users/Admin Juntao/Desktop/bens_bins_data/transposase_present.xlsx")
list_avail_reads <- pull(available_reads, available)
list_biofilm_bins <- pull(biofilm_present_bins, bin_name)
list_transposase_bins <- pull(transposase_present_bins, bin_name)
available_bins <- colnames(TOBG_Combined_RPKM)
RNA_bin_intersect <- sort(intersect(available_bins, list_avail_reads))
# sort(available_bins[grepl("prot", available_bins)])
TOBG_subset <- cbind(TOBG_Combined_RPKM[ ,c(1,240)], TOBG_Combined_RPKM[ , c(RNA_bin_intersect)])
TOBG_subset_clean <- TOBG_subset %>%
rename( bin_name = ...1) %>%
filter( bin_name %in% list_biofilm_bins)%>%
#filter( bin_name %in% list_transposase_bins) %>%
#filter(`Maximum RPKM Value` > 1) %>% # this max is not useful any more
mutate(ocean_inter = (strsplit(bin_name, "-"))) %>%
rowwise() %>%
mutate(ocean = ocean_inter[[1]]) %>%
filter( ocean == "NP" |
ocean == "SP" |
ocean == "NAT" |
ocean == "SAT" |
ocean == "IN")
TOBG_bam_map <- TOBG_subset_clean[, c(1, 3:43)]
TOBG_map_list <- data.frame()
for (r in 1:nrow(TOBG_bam_map)){
for (c in 2:ncol(TOBG_bam_map[,r])){
if(TOBG_bam_map[r, c] > 1){
bin_name <- TOBG_bam_map[r, 1]
RNA_read <- colnames(TOBG_bam_map)[c]
print(RNA_read)
TOBG_map_list <- rbind(TOBG_map_list, c(bin_name, RNA_read))
}
}
}
View(TOBG_subset)
for (r in 1:nrow(TOBG_bam_map)){
for (c in 2:ncol(TOBG_bam_map[,r])){
if(TOBG_bam_map[r, c] > 1){
bin_name <- TOBG_bam_map[r, 1]
print(c)
RNA_read <- colnames(TOBG_bam_map)[c]
print(RNA_read)
TOBG_map_list <- rbind(TOBG_map_list, c(bin_name, RNA_read))
}
}
}
for (r in 1:nrow(TOBG_bam_map)){
for (c in 2:ncol(TOBG_bam_map)){
if(TOBG_bam_map[r, c] > 1){
bin_name <- TOBG_bam_map[r, 1]
print(c)
RNA_read <- colnames(TOBG_bam_map)[c]
print(RNA_read)
TOBG_map_list <- rbind(TOBG_map_list, c(bin_name, RNA_read))
}
}
}
for (r in 1:nrow(TOBG_bam_map)){
for (c in 2:ncol(TOBG_bam_map)){
if(TOBG_bam_map[r, c] > 1){
bin_name <- TOBG_bam_map[r, 1]
RNA_read <- colnames(TOBG_bam_map)[c]
print(RNA_read)
print(c(bin_name, RNA_read))
TOBG_map_list <- rbind(TOBG_map_list, c(bin_name, RNA_read))
}
}
}
for (r in 1:nrow(TOBG_bam_map)){
for (c in 2:ncol(TOBG_bam_map)){
if(TOBG_bam_map[r, c] > 1){
bin_name <- TOBG_bam_map[r, 1]
RNA_read <- colnames(TOBG_bam_map)[c]
print(RNA_read)
print(rbind(bin_name, RNA_read))
TOBG_map_list <- rbind(TOBG_map_list, c(bin_name, RNA_read))
}
}
}
for (r in 1:nrow(TOBG_bam_map)){
for (c in 2:ncol(TOBG_bam_map)){
if(TOBG_bam_map[r, c] > 1){
bin_name <- TOBG_bam_map[r, 1]
RNA_read <- colnames(TOBG_bam_map)[c]
print(RNA_read)
print(cbind(bin_name, RNA_read))
TOBG_map_list <- rbind(TOBG_map_list, c(bin_name, RNA_read))
}
}
}
for (r in 1:nrow(TOBG_bam_map)){
for (c in 2:ncol(TOBG_bam_map)){
if(TOBG_bam_map[r, c] > 1){
bin_name <- TOBG_bam_map[r, 1]
RNA_read <- colnames(TOBG_bam_map)[c]
#print(RNA_read)
#print(cbind(bin_name, RNA_read))
TOBG_map_list <- rbind(TOBG_map_list, cbind(bin_name, RNA_read))
}
}
}
for (r in 1:nrow(TOBG_bam_map)){
for (c in 2:ncol(TOBG_bam_map)){
if(TOBG_bam_map[r, c] > 1){
bin_name <- TOBG_bam_map[r, 1]
RNA_read <- colnames(TOBG_bam_map)[c]
#print(RNA_read)
print(cbind(bin_name, RNA_read))
TOBG_map_list <- rbind(TOBG_map_list, cbind(bin_name, RNA_read))
}
}
}
TOBG_map_list <- data.frame(c("bin_name", "RNA_read_file"))
for (r in 1:nrow(TOBG_bam_map)){
for (c in 2:ncol(TOBG_bam_map)){
if(TOBG_bam_map[r, c] > 1){
bin_name <- TOBG_bam_map[r, 1]
RNA_read <- colnames(TOBG_bam_map)[c]
#print(RNA_read)
print(cbind(bin_name, RNA_read))
TOBG_map_list <- rbind(TOBG_map_list, cbind(bin_name, RNA_read))
}
}
}
View(TOBG_map_list)
TOBG_map_list <- data.frame(matrix(c("bin_name", "RNA_read_file")), nrow = 1)
for (r in 1:nrow(TOBG_bam_map)){
for (c in 2:ncol(TOBG_bam_map)){
if(TOBG_bam_map[r, c] > 1){
bin_name <- TOBG_bam_map[r, 1]
RNA_read <- colnames(TOBG_bam_map)[c]
#print(RNA_read)
print(cbind(bin_name, RNA_read))
TOBG_map_list <- rbind(TOBG_map_list, cbind(bin_name, RNA_read))
}
}
}
TOBG_map_list <- matrix(c("bin_name", "RNA_read_file"), nrow = 1)
for (r in 1:nrow(TOBG_bam_map)){
for (c in 2:ncol(TOBG_bam_map)){
if(TOBG_bam_map[r, c] > 1){
bin_name <- TOBG_bam_map[r, 1]
RNA_read <- colnames(TOBG_bam_map)[c]
#print(RNA_read)
print(cbind(bin_name, RNA_read))
TOBG_map_list <- rbind(TOBG_map_list, cbind(bin_name, RNA_read))
}
}
}
for (r in 1:nrow(TOBG_bam_map)){
for (c in 2:ncol(TOBG_bam_map)){
if(TOBG_bam_map[r, c] > 1){
bin_name <- TOBG_bam_map[r, 1]
RNA_read <- colnames(TOBG_bam_map)[c]
#print(RNA_read)
print(cbind(bin_name, RNA_read))
TOBG_map_list <- unname(rbind(TOBG_map_list, cbind(bin_name, RNA_read)))
}
}
}
for (r in 1:nrow(TOBG_bam_map)){
for (c in 2:ncol(TOBG_bam_map)){
if(TOBG_bam_map[r, c] > 1){
bin_name <- TOBG_bam_map[r, 1]
RNA_read <- colnames(TOBG_bam_map)[c]
#print(RNA_read)
print(cbind(bin_name, RNA_read))
TOBG_map_list <- rbind(TOBG_map_list, unname(cbind(bin_name, RNA_read)))
}
}
}
for (r in 1:nrow(TOBG_bam_map)){
for (c in 2:ncol(TOBG_bam_map)){
if(TOBG_bam_map[r, c] > 1){
bin_name <- TOBG_bam_map[r, 1]
RNA_read <- colnames(TOBG_bam_map)[c]
#print(RNA_read)
print(cbind(bin_name, RNA_read))
TOBG_map_list <- rbind(unname(TOBG_map_list), cbind(bin_name, RNA_read))
}
}
}
TOBG_map_list <- list()
TOBG_map_list <- data.frame()
for (r in 1:nrow(TOBG_bam_map)){
for (c in 2:ncol(TOBG_bam_map)){
if(TOBG_bam_map[r, c] > 1){
bin_name <- TOBG_bam_map[r, 1]
RNA_read <- colnames(TOBG_bam_map)[c]
#print(RNA_read)
append <- data.frame(x = bin_name, y = RNA_read)
TOBG_map_list <- rbind(TOBG_map_list,append)
}
}
}
View(TOBG_map_list)
TOBG_map_list <- data.frame()
for (r in 1:nrow(TOBG_bam_map)){
for (c in 2:ncol(TOBG_bam_map)){
if(TOBG_bam_map[r, c] > 1){
append <- data.frame(bin_name = TOBG_bam_map[r, 1],
RNA_read = colnames(TOBG_bam_map)[c],
cov_value = TOBG_bam_map[r, c])
TOBG_map_list <- rbind(TOBG_map_list,append)
}
}
}
for (r in 1:nrow(TOBG_bam_map)){
for (c in 2:ncol(TOBG_bam_map)){
if(TOBG_bam_map[r, c] > 1){
append <- data.frame(x = TOBG_bam_map[r, 1],
y = colnames(TOBG_bam_map)[c],
z = TOBG_bam_map[r, c])
TOBG_map_list <- rbind(TOBG_map_list,append)
}
}
}
View(TOBG_map_list)
TOBG_map_list <- data.frame()
for (r in 1:nrow(TOBG_bam_map)){
for (c in 2:ncol(TOBG_bam_map)){
if(TOBG_bam_map[r, c] > 1){
append <- data.frame(bin_name = TOBG_bam_map[r, 1],
RNA_read = colnames(TOBG_bam_map)[c],
cov_value = TOBG_bam_map[r, c])
TOBG_map_list <- rbind(TOBG_map_list, unname(append))
}
}
}
TOBG_map_list <- data.frame()
for (r in 1:nrow(TOBG_bam_map)){
for (c in 2:ncol(TOBG_bam_map)){
if(TOBG_bam_map[r, c] > 1){
bin_name <- TOBG_bam_map[r, 1]
RNA_read <- colnames(TOBG_bam_map)[c]
#print(RNA_read)
append <- data.frame(bin_name = bin_name, y = RNA_read)
TOBG_map_list <- rbind(TOBG_map_list,append)
}
}
}
TOBG_map_list <- data.frame()
for (r in 1:nrow(TOBG_bam_map)){
for (c in 2:ncol(TOBG_bam_map)){
if(TOBG_bam_map[r, c] > 1){
bin_name <- TOBG_bam_map[r, 1]
RNA_read <- colnames(TOBG_bam_map)[c]
#print(RNA_read)
append <- data.frame(bin_name = bin_name, RNA_read_file = RNA_read)
TOBG_map_list <- rbind(TOBG_map_list,append)
}
}
}
TOBG_map_list <- data.frame()
for (r in 1:nrow(TOBG_bam_map)){
for (c in 2:ncol(TOBG_bam_map)){
if(TOBG_bam_map[r, c] > 1){
bin_name <- TOBG_bam_map[r, 1]
RNA_read <- colnames(TOBG_bam_map)[c]
cov_value <- TOBG_bam_map[r, c]
#print(RNA_read)
append <- data.frame(bin_name = bin_name,
RNA_read_file = RNA_read,
coverage_value = cov_value)
TOBG_map_list <- rbind(TOBG_map_list,append)
}
}
}
TOBG_map_list <- data.frame()
for (r in 1:nrow(TOBG_bam_map)){
for (c in 2:ncol(TOBG_bam_map)){
if(TOBG_bam_map[r, c] > 1){
bin_name <- TOBG_bam_map[r, 1]
RNA_read <- colnames(TOBG_bam_map)[c]
cov_value <- TOBG_bam_map[r, c]
print(cov_value)
append <- data.frame(bin_name = bin_name,
RNA_read_file = RNA_read,
coverage_value = cov_value)
TOBG_map_list <- rbind(TOBG_map_list,append)
}
}
}
TOBG_map_list <- data.frame()
for (r in 1:nrow(TOBG_bam_map)){
for (c in 2:ncol(TOBG_bam_map)){
if(TOBG_bam_map[r, c] > 1){
bin_name <- TOBG_bam_map[r, 1]
RNA_read <- colnames(TOBG_bam_map)[c]
cov_value <- TOBG_bam_map[r, c]
print(unname(cov_value))
append <- data.frame(bin_name = bin_name,
RNA_read_file = RNA_read,
coverage_value = cov_value)
TOBG_map_list <- rbind(TOBG_map_list,append)
}
}
}
for (r in 1:nrow(TOBG_bam_map)){
for (c in 2:ncol(TOBG_bam_map)){
if(TOBG_bam_map[r, c] > 1){
bin_name <- TOBG_bam_map[r, 1]
RNA_read <- colnames(TOBG_bam_map)[c]
cov_value <- TOBG_bam_map[r, c]
print(unname(cov_value))
append <- unname(data.frame(bin_name = bin_name,
RNA_read_file = RNA_read,
coverage_value = cov_value))
TOBG_map_list <- rbind(TOBG_map_list,append)
}
}
}
TOBG_map_list <- data.frame()
for (r in 1:nrow(TOBG_bam_map)){
for (c in 2:ncol(TOBG_bam_map)){
if(TOBG_bam_map[r, c] > 1){
bin_name <- TOBG_bam_map[r, 1]
RNA_read <- colnames(TOBG_bam_map)[c]
cov_value <- TOBG_bam_map[r, c]
append <- unname(data.frame(bin_name = bin_name,
RNA_read_file = RNA_read,
coverage_value = cov_value))
TOBG_map_list <- rbind(TOBG_map_list,append)
}
}
}
View(TOBG_map_list)
TOBG_map_list <- data.frame()
colnames(TOBG_map_list)<-c("bin_name","RNA_read_file","coverage")
for (r in 1:nrow(TOBG_bam_map)){
for (c in 2:ncol(TOBG_bam_map)){
if(TOBG_bam_map[r, c] > 1){
bin_name <- TOBG_bam_map[r, 1]
RNA_read <- colnames(TOBG_bam_map)[c]
cov_value <- TOBG_bam_map[r, c]
append <- data.frame(bin_name,RNA_read, cov_value)
TOBG_map_list <- rbind(TOBG_map_list,append)
}
}
}
TOBG_map_list <- data.frame()
colnames(TOBG_map_list)<-c("bin_name","RNA_read_file","coverage")
TOBG_map_list <- data.frame()
for (r in 1:nrow(TOBG_bam_map)){
for (c in 2:ncol(TOBG_bam_map)){
if(TOBG_bam_map[r, c] > 1){
bin_name <- TOBG_bam_map[r, 1]
RNA_read <- colnames(TOBG_bam_map)[c]
cov_value <- TOBG_bam_map[r, c]
append <- data.frame(bin_name,RNA_read, cov_value)
TOBG_map_list <- rbind(TOBG_map_list,append)
}
}
}
TOBG_bam_map <- TOBG_subset_clean[, c(1, 3:43)]
TOBG_map_list <- data.frame()
for (r in 1:nrow(TOBG_bam_map)){
for (c in 2:ncol(TOBG_bam_map)){
if(TOBG_bam_map[r, c] > 1){
bin_name <- TOBG_bam_map[r, 1]
RNA_read <- colnames(TOBG_bam_map)[c]
append <- data.frame(bin_name,RNA_read)
TOBG_map_list <- rbind(TOBG_map_list,append)
}
}
}
TOBG_bam_map[1,1]
TOBG_bam_map[1,2]
c(TOBG_bam_map[1,2])
TOBG_map_list <- data.frame()
for (r in 1:nrow(TOBG_bam_map)){
for (c in 2:ncol(TOBG_bam_map)){
if(TOBG_bam_map[r, c] > 1){
bin_name <- TOBG_bam_map[r, 1]
RNA_read <- colnames(TOBG_bam_map)[c]
append <- data.frame(bin_name,RNA_read, c(TOBG_bam_map[r,c]))
TOBG_map_list <- rbind(TOBG_map_list,append)
}
}
}
pull(TOBG_bam_map[1,2])
TOBG_map_list <- data.frame()
for (r in 1:nrow(TOBG_bam_map)){
for (c in 2:ncol(TOBG_bam_map)){
if(TOBG_bam_map[r, c] > 1){
bin_name <- TOBG_bam_map[r, 1]
RNA_read <- colnames(TOBG_bam_map)[c]
append <- data.frame(bin_name,RNA_read, pull(TOBG_bam_map[r,c]))
TOBG_map_list <- rbind(TOBG_map_list,append)
}
}
}
colnames(TOBG_map_list)<-c("bin_name","RNA_read_file","coverage")
colnames(TOBG_map_list)<-c("bin_name","RNA_read_file","DNA_coverage")
TOBG_map_list <- data.frame()
for (r in 1:nrow(TOBG_bam_map)){
for (c in 2:ncol(TOBG_bam_map)){
if(TOBG_bam_map[r, c] > 0.1){
bin_name <- TOBG_bam_map[r, 1]
RNA_read <- colnames(TOBG_bam_map)[c]
append <- data.frame(bin_name,RNA_read, pull(TOBG_bam_map[r,c]))
TOBG_map_list <- rbind(TOBG_map_list,append)
}
}
}
colnames(TOBG_map_list)<-c("bin_name","RNA_read_file","DNA_coverage")
TOBG_map_list <- data.frame()
for (r in 1:nrow(TOBG_bam_map)){
for (c in 2:ncol(TOBG_bam_map)){
if(TOBG_bam_map[r, c] > 0.5){
bin_name <- TOBG_bam_map[r, 1]
RNA_read <- colnames(TOBG_bam_map)[c]
append <- data.frame(bin_name,RNA_read, pull(TOBG_bam_map[r,c]))
TOBG_map_list <- rbind(TOBG_map_list,append)
}
}
}
colnames(TOBG_map_list)<-c("bin_name","RNA_read_file","DNA_coverage")
View(TOBG_subset_clean)
print(i)
for (i in 0:10){
print(i)
}
count = 0
for (i in 0:10){
count += 1
}
print(count)
count = 0
for (i in 0:10){
count <- count + 1
}
print(count)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path ))
source("./init_share.R")
g(pn_ps_integron, pn_ps_bins, pn_ps_total, tara_integron_summary, malaspina_integron_summary, tara_integron_all, malaspina_integron_all) %=% init_integron()
g(bin_taxon, depth_comparison, malaspina_bins) %=% init_bins()
g(trans_in_tara_bins, trans_in_mala_bins) %=% init_transposase_in_bins()
# see whether the bins in the deep ocean have a lower pnps
bin_taxon$log_bin_pnps <- log(bin_taxon$median_bin_pnps)
bin_taxon <- bin_taxon %>% filter(depth %in% c("SRF", "DCM", "MES")) %>%
mutate(is_MES = ifelse(depth == "MES", "MES", "SRF&DCM"))
# bin_taxon$is_MES = bin_taxon$depth
tara_bin_trans <- trans_in_tara_bins %>% select(c("pNpS"))%>% filter(pNpS < 10)
tara_bin_trans$is_MES <- "Tara_trans"
mala_bin_trans <- trans_in_mala_bins %>% select(c("pNpS")) %>% filter(pNpS < 10)
mala_bin_trans$is_MES <- "Mala_trans"
colnames(mala_bin_trans) <- c("median_bin_pnps", "is_MES")
colnames(tara_bin_trans) <- c("median_bin_pnps", "is_MES")
malaspina <- malaspina_bins %>% select(c("median_bin_pnps", "is_MES")) %>% filter(median_bin_pnps < 10)
to_graph <- rbind(mala_bin_trans,
tara_bin_trans,
malaspina,
bin_taxon %>%
filter(depth %in% c("SRF", "DCM", "MES")) %>%
select(c("is_MES", "median_bin_pnps")))
to_graph$is_MES <- factor(to_graph$is_MES, levels = c("Mala_trans","Deep_Malaspina",
"MES","SRF&DCM","Tara_trans"))
to_graph$log_pnps <- log10(to_graph$median_bin_pnps)
tara_median <- log10(0.1066)
mala_median <- log10(0.455)
scale1 <- c(-2, -1.5, -1, -0.5, 0, 0.5, 1)
log_scale1 <- c("<0.01", "0.03", "0.10", "0.32", "1", "3.16", "10")
p1 <- to_graph %>%
ggplot(aes(x = is_MES, y = log_pnps, fill=is_MES)) +
scale_x_discrete(labels=c("Tara_trans" = "Transposases\nin MAGs",
"SRF&DCM" = "SRF&DCM\nMAG medians",
"MES" = "MES\nMAG medians",
"Mala_trans" = "Transposases\nin MAGs",
"Deep_Malaspina" = "Malaspina\nMAG medians")) +
geom_segment(aes(x=0.5,xend=2.4,y=mala_median,yend=mala_median),size=1, linetype=1, color = "blue") +
geom_segment(aes(x=2.5,xend=5.5,y=tara_median,yend=tara_median),size=1, linetype=1, color = "red") +
annotate(geom="label",x = 2.5, y = mala_median,label.size = NA, label = "Malaspina median: 0.455", fill="white", color = "blue") +
annotate(geom="label",x = 5.5, y = tara_median,label.size = NA, label = "Tara Oceans median: 0.1066", fill="white", color = "red") +
theme_classic() +
geom_boxplot(alpha = 0.5, width=.5, outlier.colour = NA) +
stat_compare_means(comparisons = list( c("SRF&DCM", "MES"),
c("Deep_Malaspina", "MES"),
c("MES", "Tara_trans"),
c("Deep_Malaspina", "Mala_trans")),
label = "p.signif", hide.ns = TRUE, tip.length = 0.01,
label.y = c(-0.1,0.7, 0.9, 0.95)) +
stat_summary(fun.data = boxplot.give.n, geom = "text", position=position_nudge(x = 0, y = -0.7)) +
scale_y_continuous(breaks = scale1, labels = log_scale1, name = "pN/pS", limits = c(-2, 1)) +
xlab("Malaspina          Tara Oceans")+
scale_fill_manual(breaks=c("Tara_trans", "SRF&DCM","MES","Deep_Malaspina", "Mala_trans"),
values=c("orange", "sky blue", "steelblue", "blue4", "orange"))+
theme(legend.position="none")+
coord_flip() #
to_graph1 <- bin_taxon %>%
select("transposase gene calls in genome (%)", "median_bin_pnps", "depth") %>%
mutate(`transposase gene calls in genome (%)`, `transposase gene calls in genome (%)` = ifelse(
`transposase gene calls in genome (%)` == 0, 0.01, `transposase gene calls in genome (%)`))
to_graph1$`transposase gene calls in genome (%)` = log10(to_graph1$`transposase gene calls in genome (%)`)
scale <- c(-2, -1.5, -1, -0.5, 0)
log_scale <- c("0%\nno hits", "0.03%", "0.10%", "0.33%", "1.0%")
p2 <- to_graph1 %>%
ggplot(aes(x = median_bin_pnps, y = `transposase gene calls in genome (%)`)) +
geom_point(alpha=0.3, stroke = 0, color = "red") +
theme_classic() +
scale_x_log10() +
scale_y_continuous(breaks = scale, labels = log_scale) +
xlab("Median MAG pN/pS (Tara Oceans only)") +
ylab("% of transposase ORF in MAG")
# geom_point(aes(color = depth)) +
# labs(color = "Depth")+
# annotate(geom="text", x=0.8, y=-1.75, label="Tara Oceans\nMAGs only",color="red") +
# scale_color_manual(breaks=c("SRF","DCM","MES"), values=c("sky blue", "steelblue", "blue"))
# deep ocean bins have higher pnps
t.test(log_bin_pnps ~ is_MES, data = bin_taxon %>% filter(depth %in% c("SRF", "DCM", "MES")))
t.test(log_pnps ~ is_MES, data = to_graph %>% filter(is_MES %in% c("MES", "Deep_Malaspina")))
